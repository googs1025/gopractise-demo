// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSecretsParams creates a new GetSecretsParams object
// with the default values initialized.
func NewGetSecretsParams() GetSecretsParams {

	var (
		// initialize parameters with default values

		expiresDefault = int64(0)
	)

	return GetSecretsParams{
		Expires: &expiresDefault,
	}
}

// GetSecretsParams contains all the bound params for the get secrets operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetSecrets
type GetSecretsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: header
	*/
	Description *string
	/*
	  In: header
	  Default: 0
	*/
	Expires *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetSecretsParams() beforehand.
func (o *GetSecretsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindDescription(r.Header[http.CanonicalHeaderKey("description")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindExpires(r.Header[http.CanonicalHeaderKey("expires")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDescription binds and validates parameter Description from header.
func (o *GetSecretsParams) bindDescription(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Description = &raw

	return nil
}

// bindExpires binds and validates parameter Expires from header.
func (o *GetSecretsParams) bindExpires(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetSecretsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("expires", "header", "int64", raw)
	}
	o.Expires = &value

	return nil
}
